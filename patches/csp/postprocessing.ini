[general]
delay=0.05
debug=2

[redis]
hostname=localhost
port=6379

[initial]
; here you can specify the initial values of some control values

[input]
; the keys here can have an arbitrary name, but should map those in the output section
; the keys must be lower-case. values should not contain an equation, only one-to-one mappings
beta_left_min=spectral.left_motor.beta.min_att
beta_left_max=spectral.left_motor.beta.max_att
beta_left=spectral.left_motor.beta

beta_right_min=spectral.right_motor.beta.min_att
beta_right_max=spectral.right_motor.beta.max_att
beta_right=spectral.right_motor.beta

alpha_occipital_min=spectral.occipital.alpha.min_att
alpha_occipital_max=spectral.occipital.alpha.max_att
alpha_occipital=spectral.occipital.alpha

alpha_occipital1_min=spectral.occipital1.alpha.min_att
alpha_occipital1_max=spectral.occipital1.alpha.max_att
alpha_occipital1=spectral.occipital1.alpha

alpha_occipital2_min=spectral.occipital2.alpha.min_att
alpha_occipital2_max=spectral.occipital2.alpha.max_att
alpha_occipital2=spectral.occipital2.alpha

alpha_occipital3_min=spectral.occipital3.alpha.min_att
alpha_occipital3_max=spectral.occipital3.alpha.max_att
alpha_occipital3=spectral.occipital3.alpha

alpha_occipital4_min=spectral.occipital4.alpha.min_att
alpha_occipital4_max=spectral.occipital4.alpha.max_att
alpha_occipital4=spectral.occipital4.alpha

[output]
; besides +, -, /, *, the equations also support log, log2, log10, exp, power from numpy
; and compress, limit, rescale, normalizerange, normalizestandard from EEGsynth

post.beta_left  = ((beta_left - beta_left_min * 0.5)   / (max(beta_left_max, beta_left*1.1)   - beta_left_min * 0.5))
post.beta_right = ((beta_right - beta_right_min * 0.5) / (max(beta_right_max, beta_right*1.1) - beta_right_min * 0.5))
post.betalat    = (((beta_left - beta_left_min * 0.5)  / (max(beta_left_max, beta_left*1.1)   - beta_left_min * 0.5)) - ((beta_right - beta_right_min * 0.5)  / (max(beta_right_max, beta_right*1.1)  - beta_right_min * 0.5)) + 1) / 2
post.alpha      = (alpha_occipital  - alpha_occipital_min  * 0.5) / (max(alpha_occipital_max,alpha_occipital*1.1)  - alpha_occipital_min  * 0.5)
; post.alpha1     = (alpha_occipital1 - alpha_occipital_min1 * 0.5) / (max(alpha_occipital_max1,alpha_occipital1*1.1) - alpha_occipital_min1 * 0.5)
; post.alpha2     = (alpha_occipital2 - alpha_occipital_min2 * 0.5) / (max(alpha_occipital_max2,alpha_occipital2*1.1) - alpha_occipital_min2 * 0.5)
; post.alpha3     = (alpha_occipital3 - alpha_occipital_min3 * 0.5) / (max(alpha_occipital_max3,alpha_occipital3*1.1) - alpha_occipital_min3 * 0.5)
; post.alpha4     = (alpha_occipital4 - alpha_occipital_min4 * 0.5) / (max(alpha_occipital_max4,alpha_occipital4*1.1) - alpha_occipital_min4 * 0.5)
; post.alpha_average = ((alpha_occipital1 - alpha_occipital_min1 * 0.5) / (max(alpha_occipital_max1,alpha_occipital1*1.1) - alpha_occipital_min1 * 0.5) + (alpha_occipital2 - alpha_occipital_min2 * 0.5) / (max(alpha_occipital_max2,alpha_occipital2*1.1) - alpha_occipital_min2 * 0.5) + (alpha_occipital3 - alpha_occipital_min3 * 0.5) / (max(alpha_occipital_max3,alpha_occipital3*1.1) - alpha_occipital_min3 * 0.5) + (alpha_occipital4 - alpha_occipital_min4 * 0.5) / (max(alpha_occipital_max4,alpha_occipital4*1.1) - alpha_occipital_min4 * 0.5))/4
post.beta_left_raw  = beta_left
post.beta_right_raw = beta_right
post.betalat2 = (beta_left - beta_right) / (beta_left + beta_right)
