[general]
delay=0.05
debug=0

[redis]
hostname=localhost
port=6379

[initial]
; here you can specify the initial values of some control values

[input]
; the keys here can have an arbitrary name, but should map those in the output section
; the keys must be lower-case. values should not contain an equation, only one-to-one mappings
beta_left_min=spectral.left_motor.beta.min_att
beta_left_max=spectral.left_motor.beta.max_att
beta_left=spectral.left_motor.beta

beta_right_min=spectral.right_motor.beta.min_att
beta_right_max=spectral.right_motor.beta.max_att
beta_right=spectral.right_motor.beta

alpha_occipital_min=spectral.occipital.alpha.min_att
alpha_occipital_max=spectral.occipital.alpha.max_att
alpha_occipital=spectral.occipital.alpha

rms1_min=rms.channel1.min_att
rms1_max=rms.channel1.max_att
rms2_min=rms.channel2.min_att
rms2_max=rms.channel2.max_att
rms3_min=rms.channel3.min_att
rms3_max=rms.channel3.max_att
rms4_min=rms.channel4.min_att
rms4_max=rms.channel4.max_att
rms1=rms.channel1
rms2=rms.channel2
rms3=rms.channel3
rms4=rms.channel4

[output]
; besides +, -, /, *, the equations also support log, log2, log10, exp, power from numpy
; and compress, limit, rescale, normalizerange, normalizestandard from EEGsynth

post.beta_left      = ((beta_left -  beta_left_min * 0.5)  / (max(beta_left_max,  beta_left*1.1)   - beta_left_min * 0.5))
post.beta_right     = ((beta_right - beta_right_min * 0.5) / (max(beta_right_max, beta_right*1.1) -  beta_right_min * 0.5))
post.betalat        = (beta_left - beta_right) / (beta_left + beta_right)
post.beta_left_raw  = beta_left
post.beta_right_raw = beta_right
post.alpha          = (alpha_occipital  - alpha_occipital_min  * 0.5) / (max(alpha_occipital_max,alpha_occipital*1.1)  - alpha_occipital_min  * 0.5)

post.rms1 = ((rms1 - rms1_min * 0.5) / (max(rms1_max, rms1*1.1) - rms1_min * 0.5))
post.rms2 = ((rms2 - rms2_min * 0.5) / (max(rms2_max, rms2*1.1) - rms2_min * 0.5))
post.rms3 = ((rms3 - rms3_min * 0.5) / (max(rms3_max, rms3*1.1) - rms3_min * 0.5))
post.rms4 = ((rms4 - rms4_min * 0.5) / (max(rms4_max, rms4*1.1) - rms4_min * 0.5))
